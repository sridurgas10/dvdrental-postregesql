/*#top 10 most rented movie along with their total rental count
#hint: film,inventory,rental*/
select*from film

select*from inventory

select*from rental


/*1. Top-Rented Movies
 
Find the top 10 most rented movies along with their total rental count.
 
Hint: Use tables film, inventory, and rental.*/

select  title,count(rental_id) as total_rental from film as f join inventory  i on f.film_id=i.film_id 
join rental r on i.inventory_id=r.inventory_id group by f.title order by total_rental desc limit 10



 
/*2. Best Customers
 
List the top 5 customers who have spent the most money on rentals.
 
Hint: Use customer, payment, and rental.*/

select first_name,last_name,sum(amount) as rental_money from customer c join payment  p on c.customer_id=p.customer_id 
join rental r on r.rental_id=p.rental_id  group by c.customer_id  order by rental_money desc limit 5

/*3. Revenue by Store
 Calculate the total revenue generated by each store.
 Hint: Join payment, staff, and store.*/
select*from payment

select*from store

select*from staff

select st.store_id,sum(p.amount) as revenue from payment  p join store  st on  p.staff_id=st.manager_staff_id
join staff  s  on p.staff_id=s.staff_id group by st.store_id

/*4. Films by Category
 
Show each film category with the total number of films it contains.
 
Hint: Use film_category and category.*/

select * from  film_category 

select * from  category 

select name,count(film_id) from film_category as f  join category as c on f.category_id=c.category_id group by c.name


/*5. Actor Filmography
For a given actor (say Tom Hanks), list all the films they acted in.
Hint: Use actor, film_actor, and film.*/

select * from actor

select * from film_actor

select * from film

select f.title from film  f join film_actor  fa on  f.film_id=fa.film_id join actor  a on a.actor_id=fa.actor_id
where a.first_name='Ed' and a.last_name='Chase'



/*6. Customers by City
Find how many customers live in each city.
Hint: Join customer, address, and city*/
select *from city 

select *from customer 

select *from address

select  city,count(customer_id) as live_City from city  c join address a on  c.city_id=a.city_id  
join  customer cus on cus.address_id=a.address_id  group by c.city

/*7. Average Rental Duration per Category
 
Find the average rental duration for each film category.
 
Hint: Use film, film_category, and category.*/

select*from category

select * from film_category


select * from film

select name,avg(rental_duration)from category  c  join film_category fc on  fc.category_id=c.category_id 
join film  f  on f.film_id=fc.film_id group by c.name


/*8. Most Popular Film Language
 
Identify which film language is rented the most.
 
Hint: Use film, language, inventory, and rental.*/

select*from language

select*from film

select*from inventory

select*from rental

select  max(name)  from film  f join language l  on  f.language_id=l.language_id  join inventory i on  f.film_id=i.film_id
join rental  r on i.inventory_id=r.inventory_id group by l.name

/*9. Staff Performance
 
Find which staff member processed the most payments and total amount collected.
 
Hint: Use payment and staff.*/
select*from payment

select*from staff

select  first_name,last_name,max(amount),sum(amount)from payment  p join staff  s on p.staff_id=s.staff_id group by s.staff_id

/*10. Overdue Rentals
 
List all rentals that were returned late. Include customer name, film title, rental date, and return date.
 
Hint: Use rental, inventory, film, and customer.*/

select*from film

select*from inventory

select*from customer

select*from rental

    
sELECT COLUMN_NAME, DATA_TYPE
select first_name,last_name,title,rental_date,return_date ,rental_duration ,  
(r.return_date - (r.rental_date + make_interval(f.rental_duration))) AS days_late from rental as r
join customer as c on r.customer_id=c.customer_id join inventory as i on r.inventory_id=i.inventory_id 
join film as f on f.film_id=i.film_id where   r.return_date > (r.rental_date + INTERVAL '1 day' * f.rental_duration)
ORDER BY r.return_date desc

FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'rental'
AND TABLE_SCHEMA = 'public'




















.










/*
1.List all films with their category names.*/
select *from film

select*from inventory 
--film_category

select title as film_name,name as category_name from film f 
join film_category fc on f.film_id=fc.film_id 
join category c on fc.category_id=c.category_id


--2.Find the total number of films in each category
select name as category_name, count(title) as total_films from film f 
join film_category fc on f.film_id=fc.film_id 
join category c on fc.category_id=c.category_id 
group by c.name

--3.Show all actors who have acted in more than 10 films

select*from country

select*from film

select*from film_actor

select concat(first_name,' ',last_name)as actor_name ,count(fa.actor_id) from  actor a
join  film_actor fa  on a.actor_id=fa.actor_id 
join film f on f.film_id=fa.film_id 
group by a.actor_id , a.first_name,a.last_name having count(fa.actor_id) >10


--4.List customers who have rented more than 20 films.,

select *from customer

select *from film_actor

select *from payment


select concat(first_name,last_name) as customer_name,count(p.customer_id) as rented_film from customer c
join rental r on c.customer_id=r.customer_id
join payment p on r.rental_id=p.rental_id 
group by c.first_name,c.last_name having count(p.customer_id)>20

--5.Retrieve the total number of rentals per store.

select*from payment 

select s.store_id,count(rental_id)as numberof_rental from store s 
join customer c on s.store_id=c.store_id
join rental r on r.customer_id=c.customer_id
group by s.store_id

--6.Get the list of films that have never been rented.

SELECT title, length FROM film
WHERE length > (SELECT AVG(length) FROM film)


--7.Find the top 5 customers who spent the most on rentals.

select concat(c.first_name,' ',c.last_name) as customer, count(p.customer_id) as rentals from customer c 
join rental r on c.customer_id=r.customer_id 
join payment p on p.rental_id=r.rental_id 
group by c.first_name,c.last_name 
order by rentals desc limit 5 


--8.Display each film and the number of times it has been rented.

select f.title,count(r.rental_id)as total_rent from film f
join  inventory i on f.film_id = i.film_id
join  rental r on i.inventory_id = r.inventory_id
group by  f.title,f.film_id 
order by total_rent desc


--9.Find films longer than the average film length.

select * from film_Category


select title,length from film where length >(select avg(length) from film )




--10Get all customers who live in the same city as “Mary Smith.”

select *from city 

select*from address


select*from customer


select concat(c.first_name,' ',c.last_name) as cutomer_name,city.city from customer c 
join address a on a.address_id=c.address_id 
join city on city.city_id=a.city_id 
where    city.city = (
        select city.city
        from customer c2
        join address a2 on c2.address_id = a2.address_id
        join city on a2.city_id = city.city_id
        where c2.first_name = 'mary' and c2.last_name = 'smith'
        limit 1
    )





--11. Show the average rental rate of films by category.
select *from category 

select *from rental

select *from film_category

select c.name,count(c.name),avg(f.rental_rate) from film f 
join film_category fc on f.film_id=fc.film_id
join category c on c.category_id= fc.category_id 
group by c.name

--12.Find the language with the most films.

select  max(name)  from film  f 
join language l  on  f.language_id=l.language_id 
join inventory i on  f.film_id=i.film_id
join rental  r on i.inventory_id=r.inventory_id 
group by l.name

--13.Retrieve all staff members and the total payments they processed.

select  first_name,last_name,sum(amount)from payment  p join staff  s on p.staff_id=s.staff_id group by s.staff_id

--14.Get the total revenue per month.

select sum(p.amount) 

--15.Find the most popular film (highest number of rentals).

select title ,count(i.inventory_id) from film f 
join inventory i on f.film_id=i.film_id 
join rental r on r.inventory_id=i.inventory_id 
group by f.title


--16.List all customers who haven’t made any payment.

select c.first_name,c.last_name from customer c 
left join payment p on c.customer_id=p.customer_id 
where not  p.payment_id is  null



--17.Show the films available in each store

select*from city

select s.store_id,title from film f 
join inventory i on f.film_id=i.film_id 
join store s on s.store_id=i.store_id 
order by s.store_id


--18..Find customers whose last payment amount is greater than $10.

select c.first_name,c.last_name,max(p.payment_id),p.amount from customer c
join payment p on c.customer_id=p.customer_id
where p.amount >10 group by p.amount,c.first_name,c.last_name

--19.Retrieve the average film rental duration by category.


select c.name,count(c.name),avg(f.rental_duration) from film f 
join film_category fc on f.film_id=fc.film_id
join category c on c.category_id= fc.category_id 
group by c.name


--20Show the number of customers per country.customer

select country,count(cus.customer_id )from country c 
join city on city.country_id=c.country_id
join address a on a.city_id=city.city_id 
join customer cus on cus.address_id=a.address_id 
group by country order by count(cus.customer_id ) desc

--21.Find the top 3 rented films in each category.

select name,title ,count(i.film_id) from film f join inventory i on f.film_id=i.film_id join film_category fc on f.film_id=fc.film_id
join category c on c.category_id=fc.category_id join rental r on r.inventory_id= i.inventory_id group by f.title ,c.name
order by count(i.film_id) desc   


--22.Find the customer who has rented the most films in each city.

select *from film_category

WITH rental_count_per_customer AS (
    select 
        c.customer_id,
        c.first_name,
        c.last_name,
        ci.city,
        count(r.rental_id) as total_rentals,
        row_number() over (partition by ci.city order by count(r.rental_id) desc) as rn
    from rental r
    join customer c on r.customer_id = c.customer_id
    join address a on c.address_id = a.address_id
    join city ci on a.city_id = ci.city_id
    group by c.customer_id, c.first_name, c.last_name, ci.city
)
select 
    customer_id,
    first_name,
    last_name,
    city,
    total_rentals
from rental_count_per_customer
where rn = 1
order by city

--23.Calculate the running total of payments for each customer using a window function.

--24 Get the film(s) with the highest rental revenue.

select*from category

select title ,sum(p.amount) as rental_revenue from film f join inventory i on f.film_id=i.film_id
join rental r on r.inventory_id =i.inventory_id 
join payment p  on p.rental_id=r.rental_id
group by f.title order by sum(p.amount)  desc 

--25.Find the staff member with the highest total sales

select concat(s.first_name,'',s.last_name) as staff_member , sum (p.amount) ,max(p.amount) as total_Sale from staff s
join payment p on s.staff_id=p.staff_id 
join store st on st.store_id= s.store_id  
group by s.first_name,s.last_name

 

--26.Show the city that generated the highest revenue.

 
select c.city, sum(p.amount) as city_revenue from payment p
join customer cu on p.customer_id = cu.customer_id
join address a on cu.address_id = a.address_id
join city c on a.city_id = c.city_id
group by c.city order by city_revenue desc limit 1


--27 Find the top 5 countries with the highest number of rentals.

select country ,count(r.rental_id)as higesr_rental  from country c 
join city ci on  c.country_id=ci.country_id
join address a on a.city_id=ci.city_id
join customer cu on a.address_id = cu.address_id
join rental r on cu.customer_id = r.customer_id
group by c.country order by count(r.rental_id) desc limit 5 

--28. Calculate average payment per rental duration using a correlated subquery.


with film_payments as (
  select i.film_id,avg(p.amount) as avg_payment from payment p
  join rental r on p.rental_id = r.rental_id
  join inventory i on r.inventory_id = i.inventory_id
  group by i.film_id
)
select 
  f.rental_duration,
  avg(fp.avg_payment) as avg_payment_per_duration from film f
join film_payments fp on f.film_id = fp.film_id
group by f.rental_duration

--29 Find films rented by all customers from a specific city (e.g., “London”).


select f.title
from film f
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id
join customer c on r.customer_id = c.customer_id
join address a on c.address_id = a.address_id
join city ci on a.city_id = ci.city_id
where lower(ci.city) = 'london'
group by f.film_id, f.title
having count(distinct c.customer_id) = (
    select count(*)
    from customer c2
    join address a2 on c2.address_id = a2.address_id
    join city ci2 on a2.city_id = ci2.city_id
    where lower(ci2.city) = 'london'
)
--30 Identify customers who rented every film category at least once.+3


select c.customer_id,c.first_name,c.last_name from customer c
join rental r on c.customer_id = r.customer_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join film_category fc on f.film_id = fc.film_id
group by c.customer_id, c.first_name, c.last_name
having count(distinct fc.category_id) = (
        select count(distinct category_id) from film_category
    )


--31. List films that have at least one actor whose name starts with “A”.

select distinct f.title, a.first_name, a.last_name from film f
join film_actor fa on f.film_id = fa.film_id
join actor a on a.actor_id = fa.actor_id
where a.first_name like 'A%'


--32 Show which category has the highest average film replacement cost.''
select *from film_category



SELECT  c.name AS category_name, AVG(f.replacement_cost) AS avg_replacement_cost FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name ORDER BY avg_replacement_cost desc LIMIT 1



--33 Find films where more than one copy exists across different stores.

select f.title from film f 
join inventory i on f.film_id = i.film_id
group by f.film_id, f.title
having count(distinct i.store_id) > 1


--34. Get the total revenue grouped by category and month.

select 
    c.name as category,
    to_char(p.payment_date, 'yyyy-mm') as month,
    sum(p.amount) as total_revenue,
    count(*) as total_payment
    from payment p
join rental r on p.rental_id = r.rental_id
join inventory i on r.inventory_id = i.inventory_id
join film f on i.film_id = f.film_id
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id
group by c.name, to_char(p.payment_date, 'yyyy-mm')
order by month, category
    
    
--35.     Retrieve the longest and shortest films in each category.
    
select c.name as category_name,
  (select f1.title
   from film f1
   join film_category fc1 on f1.film_id = fc1.film_id
   where fc1.category_id = c.category_id
   order by f1.length desc
   limit 1) as longest_film,
  
 
  (select f2.title
   from film f2
   join film_category fc2 on f2.film_id = fc2.film_id
   where fc2.category_id = c.category_id
   order by f2.length asc
   limit 1) as shortest_film
from category c



--36. Using a CTE, find customers whose total payments exceed the average total payments.
    
with customer_totals as (
    select customer_id,sum(amount) as total_payment from payment group by customer_id),
average_total as (
    select avg(total_payment) as avg_payment from customer_totals)
select ct.customer_id,ct.total_payment
from customer_totals ct,average_total at
where ct.total_payment > at.avg_payment
order by ct.total_payment desc
    
    
-- 37 Get the last rental date for each film.


select f.film_id,f.title,max(r.rental_date) from rental r 
join inventory i on i.inventory_id=r.inventory_id
join film f on f.film_id=i.film_id
group by f.title,f.film_id order by f.film_id





--38 Find films that have been rented in all stores
select f.film_id,f.title from film f
join inventory i on f.film_id = i.film_id
join rental r on r.inventory_id = i.inventory_id
join store s on s.store_id = i.store_id
group by f.film_id, f.title
having count(distinct s.store_id) = (
    select count(*) from store
)

--39.Rank customers based on their total payments using window functions.


--40 Find the most active day of the week (based on number of rentals).

select r.rental_date as day_of_week,
      count(*) as total_rentals from rental r
group by day_of_week order by total_rentals desc limit 1

    
    